function Send-ADComplianceReport {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string[]]$Recipients,
        
        [Parameter(Mandatory=$true)]
        [string]$Subject,
        
        [Parameter(Mandatory=$true)]
        [string]$HtmlReportPath,
        
        [Parameter(Mandatory=$false)]
        [string[]]$Attachments = @(),
        
        [Parameter(Mandatory=$false)]
        [string]$SmtpServer = "smtp.company.com",
        
        [Parameter(Mandatory=$false)]
        [int]$SmtpPort = 587,
        
        [Parameter(Mandatory=$false)]
        [PSCredential]$Credential,
        
        [Parameter(Mandatory=$false)]
        [switch]$UseSSL,
        
        [Parameter(Mandatory=$false)]
        [string]$From = "$env:USERNAME@$env:USERDNSDOMAIN",
        
        [Parameter(Mandatory=$false)]
        [string[]]$CC,
        
        [Parameter(Mandatory=$false)]
        [hashtable]$CustomHeaders = @{}
    )
    
    try {
        if (!(Test-Path $HtmlReportPath)) {
            throw "HTML report file not found: $HtmlReportPath"
        }
        
        $htmlBody = Get-Content $HtmlReportPath -Raw
        
        $emailBody = @"
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; color: #333; }
        .header { background: #2c3e50; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .footer { background: #ecf0f1; padding: 20px; text-align: center; font-size: 12px; color: #666; }
        .button { background: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; display: inline-block; margin: 10px 0; }
        .info-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .info-table td { padding: 10px; border-bottom: 1px solid #ddd; }
        .info-table td:first-child { font-weight: bold; width: 150px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Active Directory Compliance Report</h1>
        <p>SOX Compliance Audit - $(Get-Date -Format "MMMM yyyy")</p>
    </div>
    
    <div class="content">
        <p>Dear Audit Team,</p>
        
        <p>Please find attached the Active Directory security audit report for your review. This report includes:</p>
        
        <ul>
            <li>Complete analysis of AD group memberships</li>
            <li>User access permissions and status</li>
            <li>Security group configurations</li>
            <li>Supporting screenshots and documentation</li>
        </ul>
        
        <table class="info-table">
            <tr>
                <td>Report Date:</td>
                <td>$(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</td>
            </tr>
            <tr>
                <td>Generated By:</td>
                <td>$env:USERNAME</td>
            </tr>
            <tr>
                <td>Domain:</td>
                <td>$env:USERDNSDOMAIN</td>
            </tr>
            <tr>
                <td>Attachments:</td>
                <td>$($Attachments.Count + 1) files</td>
            </tr>
        </table>
        
        <p>The full HTML report is attached to this email. You can open it in any web browser for interactive viewing, searching, and filtering capabilities.</p>
        
        <p>If you have any questions or need additional information, please don't hesitate to contact me.</p>
        
        <p>Best regards,<br>
        $env:USERNAME<br>
        IT Security Team</p>
    </div>
    
    <div class="footer">
        <p>This is an automated compliance report generated by the AD Audit Tool.<br>
        Please handle this information according to company security policies.</p>
    </div>
</body>
</html>
"@

        $mailParams = @{
            To = $Recipients
            From = $From
            Subject = $Subject
            Body = $emailBody
            BodyAsHtml = $true
            SmtpServer = $SmtpServer
            Port = $SmtpPort
            Attachments = @($HtmlReportPath) + $Attachments
        }
        
        if ($CC) {
            $mailParams.CC = $CC
        }
        
        if ($UseSSL) {
            $mailParams.UseSsl = $true
        }
        
        if ($Credential) {
            $mailParams.Credential = $Credential
        }
        
        foreach ($header in $CustomHeaders.Keys) {
            $mailParams.Headers = @{$header = $CustomHeaders[$header]}
        }
        
        Send-MailMessage @mailParams
        
        Write-Host "Audit report sent successfully to: $($Recipients -join ', ')" -ForegroundColor Green
        
        return [PSCustomObject]@{
            Success = $true
            Recipients = $Recipients
            SentAt = Get-Date
            AttachmentCount = $mailParams.Attachments.Count
        }
        
    } catch {
        Write-Error "Failed to send email report: $_"
        return [PSCustomObject]@{
            Success = $false
            Error = $_.Exception.Message
            Recipients = $Recipients
        }
    }
}

function New-AuditEmailConfiguration {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$ConfigPath
    )
    
    $config = @{
        SmtpSettings = @{
            Server = Read-Host "Enter SMTP server address"
            Port = Read-Host "Enter SMTP port (default: 587)"
            UseSSL = (Read-Host "Use SSL? (Y/N)") -eq 'Y'
            RequiresAuthentication = (Read-Host "Requires authentication? (Y/N)") -eq 'Y'
        }
        DefaultRecipients = @{
            To = @()
            CC = @()
        }
        ReportSettings = @{
            SubjectPrefix = "[SOX Audit]"
            IncludeTimestamp = $true
            CompressAttachments = $false
        }
    }
    
    Write-Host "`nEnter default TO recipients (comma-separated):" -ForegroundColor Cyan
    $toRecipients = Read-Host
    $config.DefaultRecipients.To = $toRecipients -split ',' | ForEach-Object { $_.Trim() }
    
    Write-Host "`nEnter default CC recipients (comma-separated, or leave blank):" -ForegroundColor Cyan
    $ccRecipients = Read-Host
    if ($ccRecipients) {
        $config.DefaultRecipients.CC = $ccRecipients -split ',' | ForEach-Object { $_.Trim() }
    }
    
    $config | ConvertTo-Json -Depth 3 | Out-File $ConfigPath
    
    Write-Host "`nEmail configuration saved to: $ConfigPath" -ForegroundColor Green
    return $config
}

Export-ModuleMember -Function Send-ADComplianceReport, New-AuditEmailConfiguration